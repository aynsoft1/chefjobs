{HEADER_HTML}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap" rel="stylesheet">
<style>
    .dashboard-title {
        font-size: 20px;
        font-weight: 700;
        line-height: 30px;
    }

    .color-dropdown {
        height: auto;
        border-radius: 100px !important;
        color: #2269F4;
        font-size: 14px;
        border: 1.5px solid #2269F4 !important;
        line-height: 19px;
        padding-left: 15px;
        padding-right: 25px;
    }

    .dashboard-small-title {
        font-weight: 600;
        color: #1D1D1D;
    }

    .number-xxl {
        font-size: 61.44px;
        font-weight: 400;
        color: #1D1D1D;
    }

    .number-xl {
        font-size: 36.04px;
        font-weight: 400;
        color: #1D1D1D;
        line-height: 45.41px;
    }

    .title-sm {
        font-size: 18.02px;
        font-weight: 400;
        color: #1D1D1D;
        line-height: 22.7px;
    }

    .box-percentage {
        border-radius: 12.65px;
        background-color: #F3F3F3;
        display: inline;
        padding: 3px 12px;
    }

    .click-percentage {
        font-weight: 400;
        color: #008000;
    }

    .nav-tabs .nav-link-dashboard {
        color: #1D1D1D !important;
        font-size: 14px;
        font-weight: 400;
        border: 0px !important;
        margin: 0;
        padding: 0 !important;
    }

    .nav-tabs .nav-item.show .nav-link-dashboard,
    .nav-tabs .nav-link-dashboard.active {
        color: #4785FF !important;
        font-size: 14px;
        font-weight: 400;
        border: 0px !important;
        margin: 0;
        padding: 0 !important;
        background: #fff;
    }

    .clicks-job-title {
        color: #1D1D1D !important;
        font-size: 14px;
        font-weight: 400;
        line-height: 21px;
        width: 42%;
    }

    .progress-bar {
        background-color: #4785ff;
        border-radius: 100px;
    }

    .progress,
    .progress-stacked {
        background: transparent;
    }

    .progress {
        height: 20px;
    }

    #chartjs-tooltip {
        background-color: transparent;
        border-radius: 5px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        padding: 5px 12px;
        pointer-events: none;
        position: absolute;
        transition: opacity 0.3s;
    }

    .chartHeading {
        font-family: 'Plus Jakarta Sans', sans-serif;
        font-size: 14px;
        font-weight: 800;
        color: #543453;
    }

    .chartLabel{
        font-family: 'Plus Jakarta Sans', sans-serif;
        font-size: 12px;
        color: #543453;
    }
</style>
<script src="{CHART_JS_SCRIPT}"></script>
<div class="container">
    <div class="row mt-5">
        <div class="col-md-12 mx-auto">
            <div class="1profile-area mb-5">
                <div class="row">
                    <div class="col-md-12 d-flex align-items-center mb-3 d-flex align-items-center">
                        <div class="dashboard-title me-3">{POSTING_STATS}</div>
                        <div class="dashboard-title">
                            {month_dropdown}
                        </div>
                    </div>
                </div>

                <div class="card mb-5"
                    style="border-width: 2px;color:#CCCCCC;border-radius:16.39px;background-color:#FCFCFC;">
                    <div class="card-body">
                        <div class="row">
                            <!-- count div -->
                            <div class="col-md-5">
                                <div class="mb-4">
                                    <div class="dashboard-small-title mb-4">{TOTAL_APPLICATIONS}</div>
                                    <div class="number-xxl">{total_applications}</div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <div class="card"
                                            style="border-radius: 10px;border-width: 0px;box-shadow: rgba(39, 8, 7, 0.05) 0px 11px 34px;">
                                            <div class="card-body" style="padding: 10px;">
                                                <div class="title-sm mb-2">{CLICKS}</div>
                                                <div class="number-xl mt-2">{total_clicks}</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="card"
                                            style="border-radius: 10px;border-width: 0px;box-shadow: rgba(39, 8, 7, 0.05) 0px 11px 34px;">
                                            <div class="card-body" style="padding: 10px;">
                                                <div class="title-sm mb-2">{IMPRESSIONS}</div>
                                                <div class="number-xl mt-2">{total_impressions}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- chart div -->
                            <div class="col-md-7" style="display: flex;flex-direction: column;justify-content: flex-start;">
                                <div style="height: 15%;">
                                    {tabButtons}
                                </div>
                                <div style="height: 85%; width: 66%;">
                                    <canvas id="reportChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.getElementById("monthSelect").addEventListener("change", function () {
        const URL = "{report_link}";
        var selectedValue = this.value;
        // console.log('selecte>>>>>', selectedValue)
        if (selectedValue) {
            var parts = selectedValue.split("-");
            if (parts.length === 2) {
                var month = parts[0];
                var year = parts[1];
                window.location.href = URL + month + '&y='+year;
            }
        }
    });

</script>

<script>
    const chartInitialValue = {chartInitialValue};
    var ctx = document.getElementById('reportChart').getContext('2d');
    var reportChart = null;

    if (chartInitialValue && chartInitialValue.length > 0) {
        updateChart(chartInitialValue[0]['type'], chartInitialValue[0]['month'], chartInitialValue[0]['year']);
    } else {
        console.error('Invalid initial chart values');
    }

    function updateChart(type, month, year) {
        var apiUrl = "{chart_url}";
        fetch(apiUrl + type + '&month=' + month + '&year=' + year)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Destroy existing chart if it exists
                if (reportChart !== null) {
                    reportChart.destroy();
                }
                updateReportChart(data, type);
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    function updateReportChart(newData, type = null) {
        let labelTitle = 'Applications';
        if (type === 'applications') {
            labelTitle = 'Applications';
        } else if(type === 'clicks'){
            labelTitle = 'Clicks';
        } else if(type === 'impressions'){
            labelTitle = 'Impressions';
        }

        let labels = [];
        let fullLabels = [];
        let dataPoints = [];
        let backgroundColors = '#4785ff';
        let borderColors = '#4785ff';
        let displayLegend = false;

        if (!newData || newData.length === 0) {
            console.error('No data available to update the chart');
            labels = [''];
            fullLabels = [''];
            dataPoints = [0];
        }else {
            labels = newData.map(entry => {
                        if (entry.label.length > 27) {
                            return entry.label.substring(0, 27) + '...';
                        }
                        return entry.label;
                    });
            fullLabels = newData.map(entry => entry.label);
            dataPoints = newData.map(entry => entry.values);
        }

        reportChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: labelTitle,
                    data: dataPoints,
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    borderWidth: 2,
                    barThickness: 15,
                    borderRadius: 50
                }]
            },
            options: {
                maintainAspectRatio: false,
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                        display: displayLegend
                    },
                    title: {
                        display: false
                    },
                    tooltip: {
                        enabled: false,
                        // backgroundColor: '#ffffff',
                        // titleColor: '#543453',
                        callbacks: {
                            title: function(tooltipItems) {
                                return fullLabels[tooltipItems[0].dataIndex];
                            },
                            // labelTextColor: function(tooltipItem, chart) {
                            //     return '#543453';
                            // }
                        },
                        external: function(context){
                            let tooltipEl = document.getElementById('chartjs-tooltip');
                            // Create element on first render
                            if (!tooltipEl) {
                                tooltipEl = document.createElement('div');
                                tooltipEl.id = 'chartjs-tooltip';
                                tooltipEl.classList.add('chartjs-tooltip');
                                tooltipEl.innerHTML = '<table></table>';
                                document.body.appendChild(tooltipEl);
                            }
                            // Hide if no tooltip
                            const tooltipModel = context.tooltip;
                            if (tooltipModel.opacity === 0) {
                                tooltipEl.style.opacity = 0;
                                return;
                            }
                            // Set caret Position
                            tooltipEl.classList.remove('above', 'below', 'no-transform');
                            if (tooltipModel.yAlign) {
                                tooltipEl.classList.add(tooltipModel.yAlign);
                            } else {
                                tooltipEl.classList.add('no-transform');
                            }

                            function getBody(bodyItem) {
                                return bodyItem.lines;
                            }

                             // Set Text
                             if (tooltipModel.body) {
                                const titleLines = tooltipModel.title || [];
                                const bodyLines = tooltipModel.body.map(getBody);

                                let innerHtml = '<thead>';

                                titleLines.forEach(function (title) {
                                    innerHtml += '<tr><th class="chartHeading">' + title + '</th></tr>';
                                });
                                innerHtml += '</thead><tbody>';

                                bodyLines.forEach(function (body, i) {
                                    const span = '<span class="chartLabel">' + body + '</span>';
                                    innerHtml += '<tr><td>' + span + '</td></tr>';
                                });
                                innerHtml += '</tbody>';

                                let tableRoot = tooltipEl.querySelector('table');
                                tableRoot.innerHTML = innerHtml;
                            }
                            const position = context.chart.canvas.getBoundingClientRect();
                            const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);

                            // Display, position, and set styles for font
                            tooltipEl.style.opacity = 1;
                            tooltipEl.style.position = 'absolute';
                            tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                            tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
                            tooltipEl.style.font = bodyFont.string;
                            tooltipEl.style.padding = tooltipModel.padding + 'px ' + tooltipModel.padding + 'px';
                            tooltipEl.style.pointerEvents = 'none';
                        }
                    }
                },
                scales: {
                    x: {
                        display: false,
                        min: 0,
                        grid: {
                            display: false,
                        },
                        ticks: {
                            display: false
                        }
                    },
                    y: {
                        display: true,
                        grid: {
                            display: false,
                        },
                        ticks: {
                            display: true
                        }
                    }
                },
            },
        });
    }
</script>

{FOOTER_HTML}